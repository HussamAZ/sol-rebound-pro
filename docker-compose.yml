# D:\sol rebound pro\docker-compose.yml (مع تصحيح command لـ vault)
# version: '3'

services:
  vault:
    image: hashicorp/vault:latest # أو إصدار محدد مثل 1.15.6
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./vault-config.hcl:/vault/config/vault-config.hcl
    # --- تصحيح تعريف الأمر والوسائط ---
    command: >
      sh -c "sleep 5 && vault server -config=/vault/config/vault-config.hcl"
    # ----------------------------------
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://127.0.0.1:8200"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: |
        mongosh --host localhost --port 27017 --eval "try { db.adminCommand('ping') } catch (e) { print(e); quit(1); }" --quiet || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 5s
      timeout: 3s
      retries: 3
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin" # أو ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  backend:
    build: ./backend
    ports:
      - "3001:3001"
    environment:
      # تمرير المتغيرات المطلوبة من ملف .env الجذري
      NODE_ENV: ${NODE_ENV:-development} # جيد لتحديد البيئة
      RPC_URL: ${RPC_URL}
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200} # تأكد من تعريف هذا في .env الجذري أيضًا
      VAULT_ROLE_ID: ${VAULT_ROLE_ID}
      VAULT_SECRET_ID: ${VAULT_SECRET_ID}
      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/referralDB} # يمكنك تمريره من هنا أيضًا
      PROGRAM_ID: ${PROGRAM_ID:-Gn9ixPConyzFX9g9dZpCZGE7515337MMuW9sEXsG3CxJ} # تمرير معرف البرنامج إذا احتجت إليه مباشرة
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN} # تمرير توكن تيليجرام
      TELEGRAM_CHANNEL_ID: ${TELEGRAM_CHANNEL_ID} # تمرير معرف القناة
      # ENCRYPTION_KEY: ${ENCRYPTION_KEY} # تمرير مفتاح التشفير إذا كان مستخدمًا
    # --- نهاية قسم environment ---

    # يعتمد على .env الجذري
    depends_on:
      vault:
        condition: service_healthy
      mongo:
        condition: service_healthy
  frontend: # <-- الخدمة الجديدة
    build: ./frontend # المسار إلى مجلد الواجهة الأمامية
    ports:
      # ربط منفذ جهازك المضيف (3000) بمنفذ الحاوية (80 الذي يستمع إليه Nginx)
      - "3000:80"
    environment:
      # هذا لا يزال صحيحًا للواجهة
      REACT_APP_API_BASE_URL: http://backend:3001  
    depends_on:
      - backend # (اختياري) قد تنتظر بدء الـ backend، لكنها ستخدم الملفات الثابتة مباشرة
    # لا تحتاج لـ environment هنا عادةً إلا إذا مررت متغيرات وقت البناء
    # environment:
    #   - REACT_APP_API_BASE_URL=http://backend:3001 # مثال إذا استخدمت هذا المتغير
volumes:
  vault_data:
  mongo_data:
  grafana_data: